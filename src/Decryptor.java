/**
 * @file Decryptor.java
 * Test class to decrypt an anonymous letter
 * Decryptor takes a Message with a transformed text or a crypted
 *       array of integers and searches for the EncryptionChain and the keys
 *       necessary to decrypt it. In its final version, it uses different
 *       threads to search for english, german, french and italian messages.
 * TODO
 */

/**
 * @author Pascal S.P. Steger
 * @email psteger@ethz.ch
 * @date 20100123
 */
public class Decryptor {

    /**
     * @param args
     */
    public static void main(String[] args) {
	// the encrypted text, encoded with numbers
	Integer[][] text = {
	    { 20, 70, 88, 40, 25, 53, 88, 50, 41, 23, 23, 52, 46, 44, 76, 50, 53, 25, 33, 88, 16, 21, 43, 70, 25, 46, 51, 50, 53, 10, 10, 46, 51 },
	    { 44, 88, 65, 88, 71, 76, 45, 15, 50, 22, 15, 13, 13, 10, 15, 50, 10, 46, 51, 22, 15, 31, 51, 50, 88, 31, 45, 46, 43, 88, 44, 22, 88 },
	    { 71, 24, 72, 15, 40, 88, 45, 46, 32, 15, 50, 50, 43, 15, 72, 22, 53, 15, 50, 45, 90, 65, 25, 31, 15, 10, 34, 44, 88, 31, 25, 31, 71 },
	    { 76, 45, 22, 15, 70, 88, 45, 25, 40, 88, 45, 46, 72, 22, 15, 45, 43, 51, 45, 15, 53, 45, 22, 46, 51, 14, 22, 44, 88, 40, 88, 45, 46 },
	    { 71, 53, 10, 33, 88, 44, 50, 88, 72, 46, 71, 31, 50, 24, 44, 15, 50, 72, 46, 71, 72, 88, 65, 71, 88, 31, 15, 43, 46, 51, 45, 10, 46 },
	    { 51, 65, 15, 72, 45, 51, 15, 53, 40, 46, 46, 31, 74, 45, 22, 88, 40, 46, 65, 88, 50, 46, 50, 25, 71, 72, 88, 24, 45, 15, 53, 73, 88 },
	    { 31, 45, 46, 71, 46, 71, 11, 72, 46, 40, 40, 25, 50, 50, 25, 46, 71, 88, 31, 46, 33, 33, 25, 72, 88, 65, 50, 46, 33, 10, 46, 51, 65 },
	    { 50, 88, 72, 45, 25, 46, 71, 44, 22, 46, 31, 25, 31, 71, 76, 45, 50, 88, 88, 40, 45, 46, 43, 88, 72, 22, 88, 88, 65, 33, 51, 53, 88 },
	    { 25, 45, 22, 88, 65, 34, 91, 22, 15, 45, 76, 50, 14, 46, 25, 71, 14, 46, 71, 44, 25, 45, 22, 47, 12, 90, 77, 42, 82, 75, 11, 61, 30 },
	    { 64, 81, 16, 26, 46, 51, 40, 15, 10, 45, 88, 53, 53, 40, 88, 15, 50, 50, 46, 46, 71, 15, 50, 10, 46, 51, 40, 15, 71, 15, 14, 88, 45 },
	    { 46, 31, 88, 72, 25, 13, 22, 88, 65, 45, 22, 25, 50, 53, 88, 45, 45, 88, 65, 34, 24, 71, 72, 46, 71, 45, 65, 15, 65, 10, 24, 76, 53 },
	    { 53, 72, 46, 40, 40, 51, 71, 25, 72, 15, 45, 88, 44, 22, 15, 45, 30, 30, 30, 62, 44, 22, 15, 45, 88, 70, 88, 65, 50, 88, 72, 45, 25 },
	    { 46, 71, 62, 72, 53, 15, 25, 40, 88, 31, 46, 65, 72, 22, 88, 88, 65, 88, 31, 15, 43, 46, 51, 45, 34, 20, 65, 88, 10, 46, 51, 72, 51 },
	    { 65, 25, 46, 51, 50, 16, 23, 48, 88, 44, 50, 33, 65, 46, 40, 40, 88, 16, 91, 88, 53, 53, 74, 24, 15, 40, 43, 88, 25, 71, 14, 22, 46 },
	    { 71, 46, 51, 65, 88, 31, 45, 46, 72, 46, 40, 40, 15, 71, 31, 45, 22, 25, 50, 44, 88, 88, 73, 11, 88, 71, 31, 76, 50, 14, 51, 15, 65 },
	    { 31, 34, 61, 44, 88, 88, 73, 50, 53, 88, 33, 45, 15, 45, 42, 72, 22, 44, 15, 65, 79, 88, 71, 43, 51, 65, 14, 34, 80, 10, 40, 46, 46 },
	    { 31, 72, 22, 15, 71, 14, 88, 50, 50, 46, 46, 33, 45, 88, 71, 34, 21, 71, 46, 71, 88, 22, 15, 71, 31, 24, 15, 40, 50, 45, 25, 53, 53 },
	    { 15, 40, 43, 25, 45, 25, 46, 51, 50, 74, 46, 71, 45, 22, 88, 46, 45, 22, 88, 65, 45, 22, 88, 65, 88, 15, 65, 88, 45, 22, 88, 14, 65 },
	    { 15, 45, 88, 43, 88, 50, 50, 50, 46, 53, 31, 25, 88, 65, 50, 24, 22, 15, 70, 88, 45, 46, 33, 15, 72, 88, 31, 15, 25, 53, 10, 44, 63 },
	    { 22, 25, 50, 25, 65, 46, 71, 10, 50, 22, 46, 51, 53, 31, 40, 15, 73, 88, 40, 88, 50, 40, 25, 53, 88, 34, 23, 23, 78, 15, 53, 88, 41 } };
	Message msg = new Message();
	msg.setUncleartext(text);

	DecryptionChain firstChain = new DecryptionChain();
	firstChain.add( new ReadDirect() );
	// TODO: loop over guesses in Alphabet
	msg.decrypt( firstChain );
	System.out.println(msg.toString());
    }
}
